# https://streamlit-emoji-shortcodes-streamlit-app-gwckff.streamlit.app/

# ------------------------------------------------------------------------------
# Bibliotecas
# ------------------------------------------------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
from PIL import Image 

# ------------------------------------------------------------------------------

import sys
import marcelo as mp
import DFP as dfp
import funcoes as fun
import matplotlib.pyplot as plt
import plotly.express as px

# ------------------------------------------------------------------------------

# https://docs.streamlit.io/library/api-reference/text
# https://blog.streamlit.io/introducing-multipage-apps/

st.markdown("# Introdu√ß√£o üìñ")

# ------------------------------------------------------------------------------
# Dados
# ------------------------------------------------------------------------------

# https://towardsdatascience.com/pagination-in-streamlit-82b62de9f62b
# https://docs.streamlit.io/library/api-reference/session-state
# https://docs.streamlit.io/library/api-reference/layout/st.columns

# Initialization
if 'page_number' not in st.session_state:
    st.session_state['page_number'] = 0

last_page = 15

# Adicionar os bot√µes de anterior e pr√≥ximo
prev, _ ,next = st.columns([1, 2, 3])

if next.button("Pr√≥xima"):

    if st.session_state.page_number + 1 > last_page:
        st.session_state.page_number = 0
    else:
        st.session_state.page_number += 1

if prev.button("Anterior"):

    if st.session_state.page_number - 1 < 0:
        st.session_state.page_number = last_page
    else:
        st.session_state.page_number -= 1

#st.write(f"P√°gina: {st.session_state.page_number}")

# ------------------------------------------------------------------------------

if st.session_state.page_number == 0:

  df = pd.read_csv("Tickers.csv")
  df.set_index("Date", inplace=True)

  st.write("Era uma vez um investidor que em Janeiro de 2017 decidiu investir em a√ß√µes.")
  st.write("Ele j√° tinha algum conhecimento do mercado e decide escolher o setor financeiro para investir.")
  st.write("Ele sabia que o setor financeiro era um setor s√≥lido com previsibilidade nos lucros e consulta as cota√ß√µes da principais empresas do setor.")

  symbol = st.selectbox('Selecione o ticker:', df['Symbol'].unique(), key = "symbol")

  df_chart = df[df['Symbol'] == symbol].reset_index()

  # Criando o gr√°fico Altair
  my_chart = alt.Chart(df_chart).mark_bar().encode(
    x='Date:T',
    y='Low:Q',
    y2='High:Q',
    color=alt.condition("datum.Open <= datum.Close", alt.value("#06982d"), alt.value("#ae1325")),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Gr√°fico de Candlestick - {symbol}",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Regra Candlesticks
  my_chart += alt.Chart(df_chart).mark_rule().encode(
    x='Date:T',
    y='Open:Q',
    y2='Close:Q',
    color=alt.condition("datum.Open <= datum.Close", alt.value("#06982d"), alt.value("#ae1325"))
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 1:

  st.write("Depois de olhar os gr√°ficos de Candlestick dos pap√©is que lhe interessaram, o investidor escolhe algumas empresas e decide comparar as cota√ß√µes das empresas pelo pre√ßo de fechamento e pelo pre√ßo de fechamento ajustado. A diferen√ßa entre os dois gr√°ficos √© que o gr√°fico de pre√ßo de fechamento ajustado considera os efeitos de grupamentos, desdobramentos e outros eventos corporativos que influenciam no pre√ßo de fechamento.")
  
  df = pd.read_csv("Tickers.csv")
  df.set_index("Date", inplace=True)
  
  # Filtrar o dataframe pelos s√≠mbolos desejados
  tickers=['BBSE3.SA', 'PSSA3.SA', 'BBAS3.SA', 'ITSA4.SA']
  
  df_chart = df[df['Symbol'].isin(tickers)].reset_index()

  # Criando o gr√°fico com Altair
  my_chart = alt.Chart(df_chart).mark_line().encode(
    x='Date:T',
    y='Close:Q',
    color=alt.Color('Symbol:N', legend=alt.Legend(title='Ativo')),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Compara√ß√£o de Pre√ßos de Fechamento - {', '.join(tickers)}",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Legenda
  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)
  
  df = pd.read_csv("Tickers.csv")
  df.set_index("Date", inplace=True)
  
  # Filtrar o dataframe pelos s√≠mbolos desejados
  tickers=['BBSE3.SA', 'PSSA3.SA', 'BBAS3.SA', 'ITSA4.SA']
  
  df_chart = df[df['Symbol'].isin(tickers)].reset_index()

  # Criando o gr√°fico com Altair
  my_chart = alt.Chart(df_chart).mark_line().encode(
    x='Date:T',
    y='Adj Close:Q',
    color=alt.Color('Symbol:N', legend=alt.Legend(title='Ativo')),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Compara√ß√£o de Pre√ßos de Fechamento Ajustados - {', '.join(tickers)}",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Legenda
  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )
  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 2:

  st.write("N√£o satisfeito com a compara√ß√£o, o investidor decide comparar tamb√©m pelo pre√ßo de fechamento normalizado, de modo a colocar na mesma escala os pre√ßos de fechamento das empresas.")

  df = pd.read_csv("Tickers.csv")
  df.set_index("Date", inplace=True)
  
  # Filtrar o dataframe pelos s√≠mbolos desejados
  tickers=['BBSE3.SA', 'PSSA3.SA', 'BBAS3.SA', 'ITSA4.SA']
  
  # Filtrar o dataframe pelos s√≠mbolos desejados
  df_chart = df[df['Symbol'].isin(tickers)].reset_index()

  # Criando o gr√°fico com Altair
  my_chart = alt.Chart(df_chart).mark_line().encode(
    x='Date:T',
    y='Adj_Close_Norm:Q',
    color=alt.Color('Symbol:N', legend=alt.Legend(title='Ativo')),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Compara√ß√£o de Pre√ßos de Fechamento Normalizados - {', '.join(tickers)}",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 3:

  st.header("üí°")

  st.write("Lendo **as not√≠cias da √©poca** o investidor toma conhecimento que uma grande resseguradora vai abrir capital. √â uma empresa bem conceituada que tem v√°rios anos de hist√≥ria e s√≥lida reputa√ß√£o no setor de seguros, que vai fazer um IPO (abertura de capital), atrav√©s de uma oferta p√∫blica secund√°ria das a√ß√µes de emiss√£o da companhia. Influenciado pelas mat√©rias na m√≠dia e identificando uma oportunidade o investidor decide se tornar acionista da empresa e participa do IPO reservando uma parcela do seu capital.")

  df = pd.read_csv("IRBR3_train.csv")

  st.write(f"Abaixo o gr√°fico de cota√ß√µes do IRB entre os per√≠odos de **{df.min(axis=0)['Date']}** e **{df.max(axis=0)['Date']}**.")

  df.set_index("Date", inplace=True)
  
  df_chart = df[df['Symbol'] == "IRBR3.SA"].reset_index()

  # Criando o gr√°fico Altair
  my_chart = alt.Chart(df_chart).mark_line(color='green').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Close', title='Fechamento'),
    tooltip=df_chart.columns.to_list()
  )

  # Adicionando a linha com a m√≠nima
  my_chart += alt.Chart(df_chart).mark_line(color='red').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Low', title='M√≠nimo'),
    tooltip=df_chart.columns.to_list()
  )

  # Adicionando a linha com a m√°xima
  my_chart += alt.Chart(df_chart).mark_line(color='blue').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('High', title='M√°xima'),
    tooltip=df_chart.columns.to_list()
  )

  # Adicionando a linha paralela onde o fechamento foi maior que a abertura
  my_chart += alt.Chart(df_chart[df_chart['Close'] > df_chart['Open']]).mark_line(color='blue').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Close', title='Fechamento'),
    color=alt.Color('Close:Q', legend=alt.Legend(title='Fechamento')),
    tooltip=df_chart.columns.to_list()
  )

  my_chart = my_chart.properties(
    width=800,
    height=600,
    title={
    "text": f"Hist√≥rico de Pre√ßos do IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  ).configure_axisX(
    labelAngle=0,
    tickCount=5,
    format='%d/%m/%Y'
  )

  # Legenda
  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

  st.write("As a√ß√µes estreiam na B3 em 31 de julho de 2017 embutindo um m√∫ltiplo* de 1,3 o valor patrimonial.")
  st.write("Fonte: https://www.infomoney.com.br/mercados/irb-irbr3-veja-linha-do-tempo-desde-a-revelacao-de-inconsistencias-no-balanco-da-resseguradora/")
  st.write("Um m√∫ltiplo de mercado √© a rela√ß√£o entre o pre√ßo do mercado de uma a√ß√£o e suas vari√°veis operacionais, como dividendos, lucros, gera√ß√£o de caixa, entre outras. https://www.suno.com.br/artigos/multiplos-de-mercado/")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 4:

  st.header("üòç")

  st.write("Tudo vai indo bem e o papel s√≥ sobe, **as not√≠cias s√£o todas positivas**.")

  st.write("Mesmo assim, em d√∫vida se fez um bom investimento, o investidor decide consultar o Or√°culo.")
  
  st.write("O Or√°culo √© um homem muito s√°bio que estudou Ci√™ncia de Dados na UFRGS.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 5:

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"
  
  st.markdown("# O Or√°culo üîÆ")

  st.write("O investidor pede ao Or√°culo para prever se o papel vai continuar subindo de modo que ele possa continuar a investir no ativo.")

  st.write(f"De posse dos dados que tinha at√© ent√£o, os pre√ßos de fechamento desde o IPO ocorrido em **{train_start_date}** at√© a data atual **{train_end_date}**, o or√°culo faz a previs√£o do pre√ßo do ativo para os pr√≥ximos 365 dias.")


  # Criando o gr√°fico Altair
  my_chart = alt.Chart(forecast).mark_line(color='blue').encode(
    x=alt.X('ds:T', title='Data'),
    y=alt.Y('yhat', title='Pre√ßo de fechamento'),
    tooltip=forecast.columns.to_list()
  )

  # Adicionando a banda de varia√ß√£o
  my_chart += alt.Chart(forecast[forecast['ds'] > train_end_date]).mark_area(opacity=0.2, color='gray').encode(
    x='ds:T',
    y=alt.Y('yhat_lower:Q', title='Banda Inferior'),
    y2=alt.Y2('yhat_upper:Q', title='Banda Superior'),
  )

  my_chart = my_chart.properties(
    width=800,
    height=700,
    title='Previs√£o de pre√ßo da IRBR3'
  ).configure_axisX(
    labelAngle=0,
    tickCount=5,
    format='%d/%m/%Y'
  )

  # Legenda
  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

  st.write("O Or√°culo lhe diz para ficar tranquilo porque o papel vai continuar subindo.")

  st.write("Inclusive ele lhe mostra a clara tend√™ncia de alta do papel ao analisar a s√©rie temporal.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 6:

  st.header("ü§ë")

  st.write("Ent√£o o investidor tranquilo e confiante no que o Or√°culo lhe disse vai 'all in' e aposta tudo no papel.")

  st.write("Afinal, ele pensa, n√£o h√° como o Or√°culo estar errado.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 7:

  st.header("‚è≥")

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"

  st.write("Algum tempo depois ...")

  st.write("O investidor decide comparar o que o Or√°culo preveu com a realidade.")

  st.write(f"Ele compara as cota√ß√µes reais com as cota√ß√µes previstas no per√≠odo de **{test_start_date}** at√© **{test_end_date}**.")
  
  # Criando o gr√°fico de linha dos dados de treinamento
  my_chart = alt.Chart(train_dataset[train_dataset['Symbol'] == "IRBR3.SA"].reset_index()).mark_line(color='black').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Close:Q', title='Valor Real Treinamento'),
    tooltip=train_dataset.columns.to_list()
  )

  # Adicionando a linha dos dados de teste
  my_chart += alt.Chart(test_dataset[test_dataset['Symbol'] == "IRBR3.SA"].reset_index()).mark_line(color='lightgray').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Close:Q', title='Valor Real Teste'),
    tooltip=test_dataset.columns.to_list()
  )

  # Adicionando a linha dos dados previstos
  my_chart += alt.Chart(forecast).mark_line(color='blue').encode(
    x=alt.X('ds:T', title='Data'),
    y=alt.Y('yhat:Q', title='Valor Previsto'),
    tooltip=['yhat']
  )

  # Adicionando a banda de varia√ß√£o
  my_chart += alt.Chart(forecast[forecast['ds'] > train_end_date]).mark_area(opacity=0.2, color='gray').encode(
    x='ds:T',
    y=alt.Y('yhat_lower:Q', title='Banda Inferior'),
    y2=alt.Y2('yhat_upper:Q', title='Banda Superior'),
  )

  my_chart = my_chart.properties(
    width=800,
    height=700,
    title={
    "text": f"Previs√£o X Realidade - IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Legenda
  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 8:

  st.header("üò°")

  st.write("O investidor fica em choque ao perceber que o Or√°culo errou. Ele n√£o entende como isso pode ter acontecido e decide investigar o que aconteceu.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 9:

  st.header("üôàüôâüôä")

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"

  st.write(f"O investidor olha novamente o gr√°fico de Candlestick no per√≠odo posterior a previs√£o do or√°culo **({test_start_date})** at√© a data final da cota√ß√£o de fechamento que possui **({test_end_date})**...")

  st.write(f"Abaixo o gr√°fico de cota√ß√µes do IRB entre os per√≠odos de **{train_start_date}** e **{test_end_date}**.")

  df_chart = pd.concat([train_dataset[(train_dataset['Symbol'] == "IRBR3.SA")].reset_index(), test_dataset[(test_dataset['Symbol'] == "IRBR3.SA")].reset_index()])

  # Criando o gr√°fico Altair
  my_chart = alt.Chart(df_chart).mark_bar().encode(
    x='Date:T',
    y='Low:Q',
    y2='High:Q',
    color=alt.condition("datum.Open <= datum.Close", alt.value("#06982d"), alt.value("#ae1325")),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Gr√°fico de Candlestick - Previs√£o X Realidade - IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Regra Candlesticks
  my_chart += alt.Chart(df_chart).mark_rule().encode(
    x='Date:T',
    y='Open:Q',
    y2='Close:Q',
    color=alt.condition("datum.Open <= datum.Close", alt.value("#06982d"), alt.value("#ae1325"))
  )

  # Adicionando a linha dos dados previstos
  my_chart += alt.Chart(forecast).mark_line(color='blue').encode(
    x=alt.X('ds:T', title='Data'),
    y=alt.Y('yhat:Q', title='Valor Previsto'),
    tooltip=['yhat']
  )

  # Adicionando a banda de varia√ß√£o
  my_chart += alt.Chart(forecast[forecast['ds'] > train_end_date]).mark_area(opacity=0.2, color='gray').encode(
    x='ds:T',
    y=alt.Y('yhat_lower:Q', title='Banda Inferior'),
    y2=alt.Y2('yhat_upper:Q', title='Banda Superior'),
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)
  
  st.write(f"Olhando o gr√°fico, o investidor nota uma queda brusca na cota√ß√£o do ativo a partir da data de **{train_end_date}**.")
  st.write("Os sucessivos candles vermelhos de baixa sustentam uma queda que depreciam sobremaneira as cota√ß√µes e invertem drasticamente a tend√™ncia.")
  
# ------------------------------------------------------------------------------
  
elif st.session_state.page_number == 10:

  st.header("üò©")

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"
  
  st.write(f"Abaixo o gr√°fico de volume do IRB entre os per√≠odos de **{train_start_date}** e **{test_end_date}**.")

  df_chart = pd.concat([train_dataset[train_dataset['Symbol'] == "IRBR3.SA"].reset_index(), test_dataset[test_dataset['Symbol'] == "IRBR3.SA"].reset_index()])

  # Criando o gr√°fico com Altair
  my_chart = alt.Chart(df_chart).mark_line(color='blue').encode(
    x=alt.Y('Date:T', title='Data'),
    y=alt.Y('Volume:Q', title='Volume'),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Volume Negociado - IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

  max_variation=df_chart['Volume'].values.argmax()
  max_value=df_chart['Volume'].values[max_variation,]
  st.dataframe(df_chart[df_chart['Volume'].values == max_value])
  
  st.write("O gr√°fico de volume no per√≠odo analisado indica uma forte press√£o vendedora sobre o papel.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 11:

  st.header("üí∏")

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"
  
  st.write(f"Abaixo o gr√°fico de varia√ß√£o de pre√ßo do IRB entre os per√≠odos de **{train_start_date}** e **{test_end_date}**.")

  df_chart = pd.concat([train_dataset[train_dataset['Symbol'] == "IRBR3.SA"].reset_index(), test_dataset[test_dataset['Symbol'] == "IRBR3.SA"].reset_index()])

  # Criando o gr√°fico com Altair
  my_chart = alt.Chart(df_chart).mark_line().encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Variation:Q', title='Varia√ß√£o de Pre√ßo'),
    tooltip=df_chart.columns.to_list()
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Varia√ß√£o de Pre√ßo Di√°rio (Antes + Depois) - IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Adicionando a linha onde o n√≠vel de varia√ß√£o foi maior que 1
  my_chart += alt.Chart(df_chart[df_chart['Variation'] > 1]).mark_line(color='blue').encode(
    x=alt.X('Date:T', title='Data'),
    y=alt.Y('Variation:Q', title='Varia√ß√£o de Pre√ßo'),
    color=alt.Color('Variation:Q', legend=alt.Legend(title='Varia√ß√£o')),
    tooltip=df_chart.columns.to_list()
  )

  # Legenda
  my_chart = my_chart.configure_legend(
    orient='bottom',
    labelFontSize=15,
    titleFontSize=15,
    title=None
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

  max_variation=df_chart['Variation'].values.argmax()
  max_value=df_chart['Variation'].values[max_variation,]
  st.dataframe(df_chart[df_chart['Variation'].values == max_value])
  
  st.write("O gr√°fico de varia√ß√£o do pre√ßo di√°rio no per√≠odo analisado indica uma forte varia√ß√£o no pre√ßo do papel ap√≥s a data prevista pelo Or√°culo.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 12:

  st.header("üò≥")

  st.write("N√£o satisfeito, ele decide fazer um histograma com os pre√ßos de fechamento antes e depois para verificar a varia√ß√£o nos pre√ßos.")

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"

  df_chart = train_dataset[train_dataset['Symbol'] == "IRBR3.SA"].reset_index()

  # Criando o gr√°fico Altair
  my_chart = alt.Chart(df_chart).transform_density(
    'Close',
    as_=['Close', 'density']
  ).mark_bar(
    color='green',
    opacity=0.5,
  ).encode(
    x=alt.X('Close:Q', title='Fechamento'),
    y=alt.Y('density:Q', axis=alt.Axis(title='Density')),
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Distribui√ß√£o Pre√ßo Fechamento (Antes) - IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 13:

  st.header("üòü")

  train_dataset = pd.read_csv("IRBR3_train.csv")
  train_dataset.set_index("Date", inplace=True)
  test_dataset = pd.read_csv("IRBR3_test.csv")
  test_dataset.set_index("Date", inplace=True)
  forecast = pd.read_csv("IRBR3_forecast.csv")
  forecast['ds'] = pd.to_datetime(forecast['ds'].astype(str), format='%Y-%m-%d')
  train_start_date="2017-07-31"
  train_end_date="2020-02-02"
  test_start_date="2020-02-03"
  test_end_date="2021-02-01"

  df_chart = test_dataset[test_dataset['Symbol'] == "IRBR3.SA"].reset_index()

  # Criando o gr√°fico Altair
  my_chart = alt.Chart(df_chart).transform_density(
    'Close',
    as_=['Close', 'density']
  ).mark_bar(
    color='green',
    opacity=0.5,
  ).encode(
    x=alt.X('Close:Q', title='Fechamento'),
    y=alt.Y('density:Q', axis=alt.Axis(title='Density')),
  ).properties(
    width=800,
    height=600,
    title={
    "text": f"Distribui√ß√£o Pre√ßo Fechamento (Depois) - IRBR3",
    "fontSize": 16,
    "fontWeight": "bold"
    }
  )

  # Exibir o gr√°fico interativo
  st.altair_chart(my_chart.interactive(), use_container_width=True)

  st.write("Nosso investidor percebe que as cota√ß√µes de fechamento antes e depois variaram drasticamente.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 14:

  st.header("üò¢")

  st.write("Depois da decep√ß√£o ... Decidido a n√£o ser mais parte da manada, nosso her√≥i decide embarcar uma jornada de auto-conhecimento para ser capaz de realizar as pr√≥prias an√°lises sem depender dos conselhos de um Or√°culo.")
  st.write("Ele aprendeu que rentabilidade passada n√£o √© garantia de retorno futuro e sabe que para escolher uma boa empresa √© necess√°rio analisar os seus fundamentos e n√£o o gr√°ficos das cota√ß√µes da empresa na bolsa.")
  st.write("Infelizmente, l√° no fundo, o que esse pobre investidor n√£o sabia √© que a empresa em que ele investiu todo o seu dinheiro foi v√≠tima de uma fraude cont√°bil.")
  st.write("Fim da hist√≥ria.")
  st.write("")
  st.header("**Moral da hist√≥ria:**")
  st.write("Nenhum modelo de previs√£o de machine learning poderia ser capaz de prever a derrocada das a√ß√µes da empresa.")
  st.write("Somente o acompanhamento do balan√ßo da empresa, ou seja, as DFP disponibilizadas no site da CVM, atrav√©s de uma an√°lise minuciosa, poderia ser capaz de prever o cen√°rio que se concretizou.")

# ------------------------------------------------------------------------------

elif st.session_state.page_number == 15:

  st.header("‚ùì")

  st.write("As perguntas que ficam s√£o:")

  st.write("* Isso foi um caso isolado? ou isso j√° ocorreu antes?")
  st.write("* Qual o papel das not√≠cias nessa hist√≥ria toda? Como as not√≠cias influenciam as decis√µes de investimento? Fica √≥bvio que as not√≠cias tiveram um papel fundamental na queda dos pre√ßos nas cota√ß√µes da empresa na bolsa, mas ser√° que isso √© algo que sempre acontece? Qual o verdadeiro impacto?")
  st.subheader("* **√â poss√≠vel utilizar a visualiza√ß√£o de dados para prever ou entender melhor a sa√∫de financeira de uma empresa?**")

# ------------------------------------------------------------------------------
